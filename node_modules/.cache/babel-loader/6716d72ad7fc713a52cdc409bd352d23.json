{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0421\\u0435\\u043C\\u0435\\u043D \\u0422\\u0438\\u0442\\u043E\\u0432\\\\WebstormProjects\\\\react0906\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport Users from \"./Users\";\nimport { connect } from \"react-redux\";\nimport { addFollow, getCurrentUserID, setCurrentPage, setFetching, setUsers, showLastUsers, showNextUsers } from \"../../Redux/users-reducer\";\nimport * as axios from \"axios\";\nimport Loader from './loader';\n\nclass UserClass extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getUsersFromServer = (pageNumber, pageSize) => {\n      this.props.setFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${pageSize}`, {\n        withCredentials: true\n      }).then(response => {\n        let newArrUsers = [];\n        response.data.items.map(item => {\n          newArrUsers.push({\n            id: item.id,\n            name: item.name,\n            message: item.status === null ? '' : item.status,\n            url: item.photos.small,\n            follow: item.followed\n          });\n        });\n        debugger;\n        this.props.setUsers(newArrUsers, response.data.totalCount);\n        this.props.setFetching(false);\n      });\n    };\n\n    this.onPageChanged = itemNumber => {\n      this.props.setCurrentPage(itemNumber);\n      this.getUsersFromServer(itemNumber, this.props.pagingSize);\n    };\n\n    this.setCurrentUserID = id => {\n      this.props.getCurrentUserID(id);\n    };\n\n    this.onClickNextHandler = nextPage => {\n      this.props.showNextUsers();\n      this.getUsersFromServer(nextPage, this.props.pagingSize);\n    };\n\n    this.onClickLastHandler = lastPage => {\n      this.props.showLastUsers();\n      this.getUsersFromServer(lastPage, this.props.pagingSize);\n    };\n  }\n\n  componentDidMount() {\n    this.getUsersFromServer(this.props.currentPage, this.props.pagingSize);\n  }\n\n  render() {\n    let pageCount = Math.ceil(this.props.totalUsersCount / this.props.pagingSize);\n    debugger;\n    let arrPages = [];\n\n    for (let i = 1; i <= pageCount; i++) {\n      arrPages.push(i);\n    } //let newUsers = this.props.users.slice(this.props.startPosition, this.props.startPosition + this.props.pagingSize)\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 12\n      }\n    }, this.props.isFetching ? /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 36\n      }\n    }) : /*#__PURE__*/React.createElement(Users, {\n      pageCount: pageCount,\n      arrPages: arrPages,\n      userPage: this.props,\n      onClickLastHandler: this.onClickLastHandler,\n      onClickNextHandler: this.onClickNextHandler,\n      onPageChanged: this.onPageChanged,\n      setCurrentUserID: this.setCurrentUserID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 48\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  console.log(state);\n  return {\n    users: state.users.users,\n    pagingSize: state.users.pagingSize,\n    startPosition: state.users.startPosition,\n    totalUsersCount: state.users.totalUsersCount,\n    currentPage: state.users.currentPage,\n    isFetching: state.users.isFetching,\n    currentUserID: state.users.currentUserID\n  };\n}; // let mapDispatchToProps = (dispatch) => {\n//     return {\n//         showNextUsers: () => {dispatch(showNextUsersActionCreator())},\n//         showLastUsers: () => {dispatch(showLastUsersActionCreator())},\n//         addFollow: (id) => {dispatch(addFollowActionCreator(id))},\n//         setUsers: (newUsers, totalUsersCount) => {dispatch(addNewUsersActionCreator(newUsers, totalUsersCount))},\n//         setCurrentPage: (newCurrentPage) => {dispatch(setCurrentPageActionCreator(newCurrentPage))},\n//         setFetching: (isFetching) => {dispatch(setFetchingActionCreator(isFetching))}\n//     }\n// }\n\n\nconst UsersContainer = connect(mapStateToProps, {\n  showNextUsers,\n  showLastUsers,\n  addFollow,\n  setUsers,\n  setCurrentPage,\n  setFetching,\n  getCurrentUserID\n})(UserClass);\nexport default UsersContainer;","map":{"version":3,"sources":["C:/Users/Семен Титов/WebstormProjects/react0906/src/components/Users/UsersContainer.jsx"],"names":["React","Users","connect","addFollow","getCurrentUserID","setCurrentPage","setFetching","setUsers","showLastUsers","showNextUsers","axios","Loader","UserClass","Component","constructor","props","getUsersFromServer","pageNumber","pageSize","get","withCredentials","then","response","newArrUsers","data","items","map","item","push","id","name","message","status","url","photos","small","follow","followed","totalCount","onPageChanged","itemNumber","pagingSize","setCurrentUserID","onClickNextHandler","nextPage","onClickLastHandler","lastPage","componentDidMount","currentPage","render","pageCount","Math","ceil","totalUsersCount","arrPages","i","isFetching","mapStateToProps","state","console","log","users","startPosition","currentUserID","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Users from \"./Users\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addFollow, getCurrentUserID,\r\n    setCurrentPage,\r\n    setFetching,\r\n    setUsers,\r\n    showLastUsers,\r\n    showNextUsers\r\n} from \"../../Redux/users-reducer\";\r\nimport * as axios from \"axios\";\r\nimport Loader from './loader'\r\n\r\n\r\nclass UserClass extends React.Component  {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    getUsersFromServer = (pageNumber, pageSize) => {\r\n        this.props.setFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${pageSize}`, {withCredentials: true})\r\n            .then(response => {\r\n\r\n                let newArrUsers = []\r\n                response.data.items.map((item) => {\r\n                    newArrUsers.push({\r\n                        id: item.id,\r\n                        name: item.name,\r\n                        message: (item.status === null? '': item.status),\r\n                        url: item.photos.small,\r\n                        follow: item.followed\r\n                    })\r\n                })\r\n                debugger\r\n                this.props.setUsers(newArrUsers, response.data.totalCount)\r\n                this.props.setFetching(false)\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUsersFromServer(this.props.currentPage,this.props.pagingSize)\r\n    }\r\n\r\n    onPageChanged = (itemNumber) => {\r\n        this.props.setCurrentPage(itemNumber)\r\n        this.getUsersFromServer(itemNumber,this.props.pagingSize)\r\n    }\r\n setCurrentUserID = (id) => {\r\n        this.props.getCurrentUserID(id)\r\n }\r\n\r\n\r\n    onClickNextHandler = (nextPage) => {\r\n\r\n        this.props.showNextUsers()\r\n        this.getUsersFromServer(nextPage,this.props.pagingSize)\r\n    }\r\n\r\n    onClickLastHandler = (lastPage) => {\r\n\r\n        this.props.showLastUsers()\r\n        this.getUsersFromServer(lastPage,this.props.pagingSize)\r\n    }\r\n\r\n    render() {\r\n        let pageCount = Math.ceil(this.props.totalUsersCount/this.props.pagingSize)\r\n        debugger\r\n        let arrPages = []\r\n        for (let i=1; i<= pageCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n        //let newUsers = this.props.users.slice(this.props.startPosition, this.props.startPosition + this.props.pagingSize)\r\n        return (\r\n           <div>\r\n           {this.props.isFetching? <Loader/> : <Users pageCount={pageCount}\r\n                                                      arrPages={arrPages}\r\n                                                      userPage={this.props}\r\n                                                      onClickLastHandler={this.onClickLastHandler}\r\n                                                      onClickNextHandler={this.onClickNextHandler}\r\n                                                      onPageChanged={this.onPageChanged}\r\n                                                      setCurrentUserID={this.setCurrentUserID}\r\n\r\n        />}\r\n           </div>)\r\n    }\r\n\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {\r\n        users: state.users.users,\r\n        pagingSize: state.users.pagingSize,\r\n        startPosition: state.users.startPosition,\r\n        totalUsersCount: state.users.totalUsersCount,\r\n        currentPage: state.users.currentPage,\r\n        isFetching: state.users.isFetching,\r\n        currentUserID: state.users.currentUserID\r\n\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         showNextUsers: () => {dispatch(showNextUsersActionCreator())},\r\n//         showLastUsers: () => {dispatch(showLastUsersActionCreator())},\r\n//         addFollow: (id) => {dispatch(addFollowActionCreator(id))},\r\n//         setUsers: (newUsers, totalUsersCount) => {dispatch(addNewUsersActionCreator(newUsers, totalUsersCount))},\r\n//         setCurrentPage: (newCurrentPage) => {dispatch(setCurrentPageActionCreator(newCurrentPage))},\r\n//         setFetching: (isFetching) => {dispatch(setFetchingActionCreator(isFetching))}\r\n//     }\r\n// }\r\n\r\nconst UsersContainer = connect(mapStateToProps,\r\n    {\r\n        showNextUsers,\r\n        showLastUsers,\r\n        addFollow,\r\n        setUsers,\r\n        setCurrentPage,\r\n        setFetching,\r\n        getCurrentUserID\r\n    }\r\n    )(UserClass)\r\nexport default UsersContainer"]},"metadata":{},"sourceType":"module"}