{"ast":null,"code":"let rerenderTree = () => {\n  console.log('state has been changed');\n};\n\nlet State = {\n  profilePage: {\n    allMessages: [{\n      id: '1',\n      from: 'Elena',\n      to: 'Alice',\n      message: 'Hello. how are you?',\n      date: '25.06.20'\n    }, {\n      id: '2',\n      from: 'Alice',\n      to: 'Elena',\n      message: 'Hello. I am fine. What about you?',\n      date: '25.06.20'\n    }, {\n      id: '3',\n      from: 'Elena',\n      to: 'Tamara',\n      message: 'Hello. how are you?',\n      date: '26.06.20'\n    }],\n    myUsers: [{\n      id: '1',\n      name: 'Elena'\n    }, {\n      id: '2',\n      name: 'Alice'\n    }, {\n      id: '3',\n      name: 'Sergei'\n    }, {\n      id: '4',\n      name: 'Irina'\n    }, {\n      id: '5',\n      name: 'Tamara'\n    }]\n  },\n  myPosts: [{\n    id: '1',\n    from: 'Elena',\n    message: 'It is first post',\n    date: '25.06.20',\n    like: '25'\n  }, {\n    id: '2',\n    from: 'Alice',\n    message: 'Today is funny day',\n    date: '25.06.20',\n    like: '28'\n  }, {\n    id: '3',\n    from: 'Elena',\n    message: 'Today is boring day',\n    date: '26.06.20',\n    like: '8'\n  }],\n  sidebar: {},\n  newPostText: 'enter here'\n};\nexport const addPost = () => {\n  let newPost = {\n    id: '4',\n    from: 'Elena',\n    message: State.newPostText,\n    date: '25.06.20',\n    like: 0\n  };\n  State.myPosts.push(newPost);\n  rerenderTree(State);\n  State.newPostText = '';\n};\nexport const addNewPostText = newText => {\n  State.newPostText = newText;\n  rerenderTree(State);\n};\nexport const subscribe = observer => {\n  rerenderTree = observer;\n};\nexport default State;","map":{"version":3,"sources":["C:/Users/Семен Титов/WebstormProjects/react0906/src/Redux/State.js"],"names":["rerenderTree","console","log","State","profilePage","allMessages","id","from","to","message","date","myUsers","name","myPosts","like","sidebar","newPostText","addPost","newPost","push","addNewPostText","newText","subscribe","observer"],"mappings":"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","sourcesContent":["let rerenderTree = () => {\r\n    console.log('state has been changed')\r\n}\r\n\r\nlet State = {\r\n    profilePage: {\r\n        allMessages: [\r\n            {\r\n                id: '1',\r\n                from: 'Elena',\r\n                to: 'Alice',\r\n                message: 'Hello. how are you?',\r\n                date: '25.06.20'\r\n            },\r\n            {\r\n                id: '2',\r\n                from: 'Alice',\r\n                to: 'Elena',\r\n                message: 'Hello. I am fine. What about you?',\r\n                date: '25.06.20'\r\n            },\r\n            {\r\n                id: '3',\r\n                from: 'Elena',\r\n                to: 'Tamara',\r\n                message: 'Hello. how are you?',\r\n                date: '26.06.20'\r\n            }\r\n        ],\r\n\r\n        myUsers: [\r\n            {id: '1', name: 'Elena'},\r\n            {id: '2', name: 'Alice'},\r\n            {id: '3', name: 'Sergei'},\r\n            {id: '4', name: 'Irina'},\r\n            {id: '5', name: 'Tamara'}\r\n        ]\r\n    },\r\n\r\n    myPosts: [\r\n        {\r\n            id: '1',\r\n            from: 'Elena',\r\n            message: 'It is first post',\r\n            date: '25.06.20',\r\n            like: '25'\r\n        },\r\n        {\r\n            id: '2',\r\n            from: 'Alice',\r\n            message: 'Today is funny day',\r\n            date: '25.06.20',\r\n            like: '28'\r\n        },\r\n        {\r\n            id: '3',\r\n            from: 'Elena',\r\n            message: 'Today is boring day',\r\n            date: '26.06.20',\r\n            like: '8'\r\n        }\r\n    ],\r\n    sidebar: {},\r\n    newPostText: 'enter here'\r\n\r\n}\r\nexport const addPost  = () => {\r\n\r\n    let newPost = {\r\n        id: '4',\r\n        from: 'Elena',\r\n        message: State.newPostText,\r\n        date: '25.06.20',\r\n        like: 0\r\n    }\r\n    State.myPosts.push(newPost)\r\n    rerenderTree(State)\r\n    State.newPostText = ''\r\n}\r\nexport const addNewPostText  = (newText) => {\r\n\r\n    State.newPostText = newText\r\n    rerenderTree(State)\r\n}\r\n\r\nexport const subscribe = (observer) => {\r\n    rerenderTree = observer\r\n}\r\n\r\nexport default State"]},"metadata":{},"sourceType":"module"}